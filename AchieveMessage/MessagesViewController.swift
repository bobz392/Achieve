//
//  MessagesViewController.swift
//  AchieveMessage
//
//  Created by zhoubo on 2016/9/29.
//  Copyright © 2016年 zhoubo. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    @IBOutlet weak var messageTableView: UITableView!
    @IBOutlet weak var messageTitleLabel: UILabel!
    @IBOutlet weak var messageInfoLabel: UILabel!
    
    fileprivate var runningTasks = [GroupTask]()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        
        self.uiConfig()
    }
    
    fileprivate func uiConfig() {
        self.configMessageTableView()
        
        let colors = MessageColors()
        self.messageInfoLabel.text = Localized("messageUseage")
        self.messageInfoLabel.textColor = colors.secondaryTextColor
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        
        guard let allTasks = GroupUserDefault()?.runningTasksForExtension() else { return }
        Logger.log(allTasks)
        self.runningTasks.removeAll()
        self.runningTasks.append(contentsOf: allTasks)
        self.messageTableView.reloadData()
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
        
        Logger.log("didResignActive = \(conversation)")
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
        
        Logger.log("didReceive message = \(message)")
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
        Logger.log("didStartSending message = \(message)")
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
        Logger.log("didCancelSending message = \(message)")
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
        
        
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
        
        self.automaticallyAdjustsScrollViewInsets = false
        self.messageTableView.contentInset = .zero
    }
}

extension MessagesViewController: UITableViewDelegate, UITableViewDataSource {
    
    fileprivate func configMessageTableView() {
        self.messageTableView
            .register(MessageTableViewCell.nib, forCellReuseIdentifier: MessageTableViewCell.reuseId)
        self.messageTableView.tableFooterView = UIView()
        
        self.messageTableView.contentInset = .zero
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.runningTasks.count
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return MessageTableViewCell.rowHeight
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 0
    }
    
    func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
        return 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView
            .dequeueReusableCell(withIdentifier: MessageTableViewCell.reuseId,
                                 for: indexPath) as! MessageTableViewCell
        
        let groupTask = self.runningTasks[indexPath.row]
        cell.taskTitleLabel.text = groupTask.taskTitle
        cell.taskDateLabel.text = groupTask.taskCreateDate
        cell.messageBlock = { [unowned self] (text) -> Void in
            self.activeConversation?.insertText(text, completionHandler: { (error) in
                Logger.log("insert text = \(text), and error = \(error)")
            })
        }
        
        return cell
    }

}
